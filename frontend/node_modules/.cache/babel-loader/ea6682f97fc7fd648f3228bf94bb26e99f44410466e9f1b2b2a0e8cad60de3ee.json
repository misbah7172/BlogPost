{"ast":null,"code":"var _jsxFileName = \"/home/mighty/Desktop/CODE/Blog_Post/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { getToken } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      // Store user data in localStorage as backup\n      localStorage.setItem('user', JSON.stringify(action.payload.user));\n      return {\n        ...state,\n        loading: false,\n        isAuthenticated: true,\n        user: action.payload.user,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n      localStorage.removeItem('user');\n      return {\n        ...state,\n        loading: false,\n        isAuthenticated: false,\n        user: null,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      localStorage.removeItem('user');\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: null\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Keep alive mechanism - refresh user data periodically without forcing logout\n  useEffect(() => {\n    if (state.isAuthenticated) {\n      const keepAlive = setInterval(async () => {\n        try {\n          const response = await authService.getProfile();\n          if (response.user) {\n            localStorage.setItem('user', JSON.stringify(response.user));\n            dispatch({\n              type: 'UPDATE_USER',\n              payload: response.user\n            });\n          }\n        } catch (error) {\n          console.log('Keep alive failed, but not logging out:', error.message);\n          // Don't logout on keep alive failure - user can continue working\n        }\n      }, 5 * 60 * 1000); // Every 5 minutes\n\n      return () => clearInterval(keepAlive);\n    }\n  }, [state.isAuthenticated]);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      console.log('🔍 Checking authentication...');\n      const token = getToken();\n      const storedUser = localStorage.getItem('user');\n      if (token && storedUser) {\n        try {\n          // Try to use stored user data first\n          const user = JSON.parse(storedUser);\n          console.log('✅ Using stored user data:', user.name);\n          dispatch({\n            type: 'LOGIN_SUCCESS',\n            payload: {\n              user\n            }\n          });\n\n          // Optionally verify in background (don't logout on failure)\n          authService.getProfile().then(response => {\n            console.log('🔄 Background profile verification successful');\n            if (response.user) {\n              localStorage.setItem('user', JSON.stringify(response.user));\n              dispatch({\n                type: 'UPDATE_USER',\n                payload: response.user\n              });\n            }\n          }).catch(error => {\n            console.log('⚠️ Background verification failed, but keeping user logged in');\n          });\n        } catch (parseError) {\n          console.log('❌ Failed to parse stored user data, trying profile fetch');\n          // Fallback to profile fetch\n          try {\n            const response = await authService.getProfile();\n            dispatch({\n              type: 'LOGIN_SUCCESS',\n              payload: {\n                user: response.user\n              }\n            });\n          } catch (error) {\n            console.log('❌ Profile fetch failed, logging out');\n            authService.logout();\n            dispatch({\n              type: 'LOGOUT'\n            });\n          }\n        }\n      } else if (token) {\n        // Have token but no stored user data\n        try {\n          var _response$user;\n          const response = await authService.getProfile();\n          console.log('✅ Profile fetched successfully:', (_response$user = response.user) === null || _response$user === void 0 ? void 0 : _response$user.name);\n          dispatch({\n            type: 'LOGIN_SUCCESS',\n            payload: {\n              user: response.user\n            }\n          });\n        } catch (error) {\n          console.log('❌ Profile fetch failed:', error.message);\n          authService.logout();\n          dispatch({\n            type: 'LOGOUT'\n          });\n        }\n      } else {\n        console.log('❌ No token found');\n        dispatch({\n          type: 'LOGOUT'\n        });\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      const response = await authService.login({\n        email,\n        password\n      });\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: response.user\n        }\n      });\n      return response;\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const register = async (name, email, password) => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      const response = await authService.register({\n        name,\n        email,\n        password\n      });\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: response.user\n        }\n      });\n      return response;\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const logout = () => {\n    authService.logout();\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n  const updateUser = userData => {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: userData\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","getToken","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","loading","error","localStorage","setItem","JSON","stringify","payload","user","isAuthenticated","removeItem","initialState","AuthProvider","children","_s","dispatch","keepAlive","setInterval","response","getProfile","console","log","message","clearInterval","checkAuth","token","storedUser","getItem","parse","name","then","catch","parseError","logout","_response$user","login","email","password","register","updateUser","userData","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/mighty/Desktop/CODE/Blog_Post/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { getToken } from '../services/api';\n\nconst AuthContext = createContext();\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return { ...state, loading: true, error: null };\n    case 'LOGIN_SUCCESS':\n      // Store user data in localStorage as backup\n      localStorage.setItem('user', JSON.stringify(action.payload.user));\n      return { \n        ...state, \n        loading: false, \n        isAuthenticated: true, \n        user: action.payload.user,\n        error: null \n      };\n    case 'LOGIN_FAILURE':\n      localStorage.removeItem('user');\n      return { \n        ...state, \n        loading: false, \n        isAuthenticated: false, \n        user: null, \n        error: action.payload \n      };\n    case 'LOGOUT':\n      localStorage.removeItem('user');\n      return { \n        ...state, \n        isAuthenticated: false, \n        user: null, \n        loading: false,\n        error: null \n      };\n    case 'UPDATE_USER':\n      return { \n        ...state, \n        user: { ...state.user, ...action.payload } \n      };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null,\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Keep alive mechanism - refresh user data periodically without forcing logout\n  useEffect(() => {\n    if (state.isAuthenticated) {\n      const keepAlive = setInterval(async () => {\n        try {\n          const response = await authService.getProfile();\n          if (response.user) {\n            localStorage.setItem('user', JSON.stringify(response.user));\n            dispatch({ \n              type: 'UPDATE_USER', \n              payload: response.user \n            });\n          }\n        } catch (error) {\n          console.log('Keep alive failed, but not logging out:', error.message);\n          // Don't logout on keep alive failure - user can continue working\n        }\n      }, 5 * 60 * 1000); // Every 5 minutes\n\n      return () => clearInterval(keepAlive);\n    }\n  }, [state.isAuthenticated]);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      console.log('🔍 Checking authentication...');\n      const token = getToken();\n      const storedUser = localStorage.getItem('user');\n      \n      if (token && storedUser) {\n        try {\n          // Try to use stored user data first\n          const user = JSON.parse(storedUser);\n          console.log('✅ Using stored user data:', user.name);\n          dispatch({ \n            type: 'LOGIN_SUCCESS', \n            payload: { user } \n          });\n          \n          // Optionally verify in background (don't logout on failure)\n          authService.getProfile().then(response => {\n            console.log('🔄 Background profile verification successful');\n            if (response.user) {\n              localStorage.setItem('user', JSON.stringify(response.user));\n              dispatch({ \n                type: 'UPDATE_USER', \n                payload: response.user \n              });\n            }\n          }).catch(error => {\n            console.log('⚠️ Background verification failed, but keeping user logged in');\n          });\n          \n        } catch (parseError) {\n          console.log('❌ Failed to parse stored user data, trying profile fetch');\n          // Fallback to profile fetch\n          try {\n            const response = await authService.getProfile();\n            dispatch({ \n              type: 'LOGIN_SUCCESS', \n              payload: { user: response.user } \n            });\n          } catch (error) {\n            console.log('❌ Profile fetch failed, logging out');\n            authService.logout();\n            dispatch({ type: 'LOGOUT' });\n          }\n        }\n      } else if (token) {\n        // Have token but no stored user data\n        try {\n          const response = await authService.getProfile();\n          console.log('✅ Profile fetched successfully:', response.user?.name);\n          dispatch({ \n            type: 'LOGIN_SUCCESS', \n            payload: { user: response.user } \n          });\n        } catch (error) {\n          console.log('❌ Profile fetch failed:', error.message);\n          authService.logout();\n          dispatch({ type: 'LOGOUT' });\n        }\n      } else {\n        console.log('❌ No token found');\n        dispatch({ type: 'LOGOUT' });\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email, password) => {\n    dispatch({ type: 'LOGIN_START' });\n    try {\n      const response = await authService.login({ email, password });\n      dispatch({ \n        type: 'LOGIN_SUCCESS', \n        payload: { user: response.user } \n      });\n      return response;\n    } catch (error) {\n      dispatch({ \n        type: 'LOGIN_FAILURE', \n        payload: error.message \n      });\n      throw error;\n    }\n  };\n\n  const register = async (name, email, password) => {\n    dispatch({ type: 'LOGIN_START' });\n    try {\n      const response = await authService.register({ name, email, password });\n      dispatch({ \n        type: 'LOGIN_SUCCESS', \n        payload: { user: response.user } \n      });\n      return response;\n    } catch (error) {\n      dispatch({ \n        type: 'LOGIN_FAILURE', \n        payload: error.message \n      });\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    dispatch({ type: 'LOGOUT' });\n  };\n\n  const updateUser = (userData) => {\n    dispatch({ type: 'UPDATE_USER', payload: userData });\n  };\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}