{"ast":null,"code":"import { apiRequest } from './api';\nexport const blogService = {\n  // Get all blogs with optional filters\n  getBlogs: async (params = {}) => {\n    const searchParams = new URLSearchParams();\n    Object.keys(params).forEach(key => {\n      if (params[key]) {\n        searchParams.append(key, params[key]);\n      }\n    });\n    const queryString = searchParams.toString();\n    return await apiRequest(`/blogs${queryString ? `?${queryString}` : ''}`);\n  },\n  // Get single blog by ID\n  getBlog: async id => {\n    return await apiRequest(`/blogs/${id}`);\n  },\n  // Get blog categories\n  getCategories: async () => {\n    return await apiRequest('/blogs/categories');\n  },\n  // Like/unlike blog\n  toggleLike: async id => {\n    return await apiRequest(`/blogs/${id}/like`, {\n      method: 'POST'\n    });\n  },\n  // Save/unsave blog\n  toggleSave: async id => {\n    return await apiRequest(`/blogs/${id}/save`, {\n      method: 'POST'\n    });\n  },\n  // Get blog likes\n  getLikes: async id => {\n    return await apiRequest(`/blogs/${id}/likes`);\n  },\n  // Admin functions\n  createBlog: async blogData => {\n    const formData = new FormData();\n    Object.keys(blogData).forEach(key => {\n      if (blogData[key] !== null && blogData[key] !== undefined) {\n        formData.append(key, blogData[key]);\n      }\n    });\n    return await apiRequest('/blogs', {\n      method: 'POST',\n      body: formData\n    });\n  },\n  updateBlog: async (id, blogData) => {\n    const formData = new FormData();\n    Object.keys(blogData).forEach(key => {\n      if (blogData[key] !== null && blogData[key] !== undefined) {\n        formData.append(key, blogData[key]);\n      }\n    });\n    return await apiRequest(`/blogs/${id}`, {\n      method: 'PUT',\n      body: formData\n    });\n  },\n  deleteBlog: async id => {\n    return await apiRequest(`/blogs/${id}`, {\n      method: 'DELETE'\n    });\n  },\n  // Get saved blogs for user\n  getSavedBlogs: async () => {\n    return await apiRequest('/blogs/saved');\n  },\n  // Get all blogs (admin)\n  getAllBlogs: async () => {\n    return await apiRequest('/admin/blogs');\n  },\n  // Add blog comment\n  addComment: async (blogId, content) => {\n    return await apiRequest(`/comments/blog/${blogId}`, {\n      method: 'POST',\n      body: {\n        content\n      }\n    });\n  },\n  // Get blog comments\n  getComments: async blogId => {\n    return await apiRequest(`/comments/blog/${blogId}`);\n  }\n};","map":{"version":3,"names":["apiRequest","blogService","getBlogs","params","searchParams","URLSearchParams","Object","keys","forEach","key","append","queryString","toString","getBlog","id","getCategories","toggleLike","method","toggleSave","getLikes","createBlog","blogData","formData","FormData","undefined","body","updateBlog","deleteBlog","getSavedBlogs","getAllBlogs","addComment","blogId","content","getComments"],"sources":["/home/mighty/Desktop/CODE/Blog_Post/frontend/src/services/blogService.js"],"sourcesContent":["import { apiRequest } from './api';\n\nexport const blogService = {\n  // Get all blogs with optional filters\n  getBlogs: async (params = {}) => {\n    const searchParams = new URLSearchParams();\n    \n    Object.keys(params).forEach(key => {\n      if (params[key]) {\n        searchParams.append(key, params[key]);\n      }\n    });\n    \n    const queryString = searchParams.toString();\n    return await apiRequest(`/blogs${queryString ? `?${queryString}` : ''}`);\n  },\n\n  // Get single blog by ID\n  getBlog: async (id) => {\n    return await apiRequest(`/blogs/${id}`);\n  },\n\n  // Get blog categories\n  getCategories: async () => {\n    return await apiRequest('/blogs/categories');\n  },\n\n  // Like/unlike blog\n  toggleLike: async (id) => {\n    return await apiRequest(`/blogs/${id}/like`, {\n      method: 'POST',\n    });\n  },\n\n  // Save/unsave blog\n  toggleSave: async (id) => {\n    return await apiRequest(`/blogs/${id}/save`, {\n      method: 'POST',\n    });\n  },\n\n  // Get blog likes\n  getLikes: async (id) => {\n    return await apiRequest(`/blogs/${id}/likes`);\n  },\n\n  // Admin functions\n  createBlog: async (blogData) => {\n    const formData = new FormData();\n    \n    Object.keys(blogData).forEach(key => {\n      if (blogData[key] !== null && blogData[key] !== undefined) {\n        formData.append(key, blogData[key]);\n      }\n    });\n\n    return await apiRequest('/blogs', {\n      method: 'POST',\n      body: formData,\n    });\n  },\n\n  updateBlog: async (id, blogData) => {\n    const formData = new FormData();\n    \n    Object.keys(blogData).forEach(key => {\n      if (blogData[key] !== null && blogData[key] !== undefined) {\n        formData.append(key, blogData[key]);\n      }\n    });\n\n    return await apiRequest(`/blogs/${id}`, {\n      method: 'PUT',\n      body: formData,\n    });\n  },\n\n  deleteBlog: async (id) => {\n    return await apiRequest(`/blogs/${id}`, {\n      method: 'DELETE',\n    });\n  },\n\n  // Get saved blogs for user\n  getSavedBlogs: async () => {\n    return await apiRequest('/blogs/saved');\n  },\n\n  // Get all blogs (admin)\n  getAllBlogs: async () => {\n    return await apiRequest('/admin/blogs');\n  },\n\n  // Add blog comment\n  addComment: async (blogId, content) => {\n    return await apiRequest(`/comments/blog/${blogId}`, {\n      method: 'POST',\n      body: { content },\n    });\n  },\n\n  // Get blog comments\n  getComments: async (blogId) => {\n    return await apiRequest(`/comments/blog/${blogId}`);\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}