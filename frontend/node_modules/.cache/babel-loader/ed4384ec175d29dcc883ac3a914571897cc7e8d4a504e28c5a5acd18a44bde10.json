{"ast":null,"code":"var _jsxFileName = \"/home/mighty/Desktop/CODE/Blog_Post/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { getToken } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        isAuthenticated: true,\n        user: action.payload.user,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        isAuthenticated: false,\n        user: null,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        loading: false,\n        error: null\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = getToken();\n      if (token) {\n        try {\n          // Check if token is expired (basic JWT decode)\n          const tokenParts = token.split('.');\n          if (tokenParts.length === 3) {\n            const payload = JSON.parse(atob(tokenParts[1]));\n            const currentTime = Date.now() / 1000;\n\n            // If token is expired, logout immediately\n            if (payload.exp && payload.exp < currentTime) {\n              console.log('Token expired, logging out');\n              authService.logout();\n              dispatch({\n                type: 'LOGOUT'\n              });\n              return;\n            }\n          }\n\n          // Token is valid, get user profile\n          const response = await authService.getProfile();\n          dispatch({\n            type: 'LOGIN_SUCCESS',\n            payload: {\n              user: response.user\n            }\n          });\n        } catch (error) {\n          console.log('Auth check failed:', error.message);\n          // Only logout if it's an auth error, not a network error\n          if (error.message.includes('401') || error.message.includes('Unauthorized') || error.message.includes('Invalid token')) {\n            authService.logout();\n            dispatch({\n              type: 'LOGOUT'\n            });\n          } else {\n            // For network errors, keep the user logged in but show they might be offline\n            console.log('Network error during auth check, keeping user logged in');\n            dispatch({\n              type: 'LOGOUT'\n            }); // Set loading to false\n          }\n        }\n      } else {\n        dispatch({\n          type: 'LOGOUT'\n        });\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      const response = await authService.login({\n        email,\n        password\n      });\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: response.user\n        }\n      });\n      return response;\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const register = async (name, email, password) => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      const response = await authService.register({\n        name,\n        email,\n        password\n      });\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: response.user\n        }\n      });\n      return response;\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: error.message\n      });\n      throw error;\n    }\n  };\n  const logout = () => {\n    authService.logout();\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n  const updateUser = userData => {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: userData\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","getToken","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","loading","error","isAuthenticated","user","payload","initialState","AuthProvider","children","_s","dispatch","checkAuth","token","tokenParts","split","length","JSON","parse","atob","currentTime","Date","now","exp","console","log","logout","response","getProfile","message","includes","login","email","password","register","name","updateUser","userData","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/mighty/Desktop/CODE/Blog_Post/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { getToken } from '../services/api';\n\nconst AuthContext = createContext();\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return { ...state, loading: true, error: null };\n    case 'LOGIN_SUCCESS':\n      return { \n        ...state, \n        loading: false, \n        isAuthenticated: true, \n        user: action.payload.user,\n        error: null \n      };\n    case 'LOGIN_FAILURE':\n      return { \n        ...state, \n        loading: false, \n        isAuthenticated: false, \n        user: null, \n        error: action.payload \n      };\n    case 'LOGOUT':\n      return { \n        ...state, \n        isAuthenticated: false, \n        user: null, \n        loading: false,\n        error: null \n      };\n    case 'UPDATE_USER':\n      return { \n        ...state, \n        user: { ...state.user, ...action.payload } \n      };\n    case 'CLEAR_ERROR':\n      return { ...state, error: null };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: true,\n  error: null,\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = getToken();\n      if (token) {\n        try {\n          // Check if token is expired (basic JWT decode)\n          const tokenParts = token.split('.');\n          if (tokenParts.length === 3) {\n            const payload = JSON.parse(atob(tokenParts[1]));\n            const currentTime = Date.now() / 1000;\n            \n            // If token is expired, logout immediately\n            if (payload.exp && payload.exp < currentTime) {\n              console.log('Token expired, logging out');\n              authService.logout();\n              dispatch({ type: 'LOGOUT' });\n              return;\n            }\n          }\n\n          // Token is valid, get user profile\n          const response = await authService.getProfile();\n          dispatch({ \n            type: 'LOGIN_SUCCESS', \n            payload: { user: response.user } \n          });\n        } catch (error) {\n          console.log('Auth check failed:', error.message);\n          // Only logout if it's an auth error, not a network error\n          if (error.message.includes('401') || error.message.includes('Unauthorized') || error.message.includes('Invalid token')) {\n            authService.logout();\n            dispatch({ type: 'LOGOUT' });\n          } else {\n            // For network errors, keep the user logged in but show they might be offline\n            console.log('Network error during auth check, keeping user logged in');\n            dispatch({ type: 'LOGOUT' }); // Set loading to false\n          }\n        }\n      } else {\n        dispatch({ type: 'LOGOUT' });\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email, password) => {\n    dispatch({ type: 'LOGIN_START' });\n    try {\n      const response = await authService.login({ email, password });\n      dispatch({ \n        type: 'LOGIN_SUCCESS', \n        payload: { user: response.user } \n      });\n      return response;\n    } catch (error) {\n      dispatch({ \n        type: 'LOGIN_FAILURE', \n        payload: error.message \n      });\n      throw error;\n    }\n  };\n\n  const register = async (name, email, password) => {\n    dispatch({ type: 'LOGIN_START' });\n    try {\n      const response = await authService.register({ name, email, password });\n      dispatch({ \n        type: 'LOGIN_SUCCESS', \n        payload: { user: response.user } \n      });\n      return response;\n    } catch (error) {\n      dispatch({ \n        type: 'LOGIN_FAILURE', \n        payload: error.message \n      });\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    dispatch({ type: 'LOGOUT' });\n  };\n\n  const updateUser = (userData) => {\n    dispatch({ type: 'UPDATE_USER', payload: userData });\n  };\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}